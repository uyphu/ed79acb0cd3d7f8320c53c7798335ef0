package com.ltu.fm.model.user;

import java.nio.ByteBuffer;
import java.util.Date;
import java.util.Map;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIgnore;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.google.gson.annotations.Expose;
import com.ltu.fm.configuration.DynamoDBConfiguration;
import com.ltu.fm.utils.AppUtil;

/**
 * User object model - this class is annotated to be used with the DynamoDB
 * object mapper.
 */
@DynamoDBTable(tableName = DynamoDBConfiguration.USERS_TABLE_NAME)
public class User implements Comparable<User>{
	/** The id. */
	@DynamoDBHashKey(attributeName = "id")
	@DynamoDBAutoGeneratedKey
	@Expose
	private String id;

	/** The email. */
	@DynamoDBIndexHashKey
	@DynamoDBAttribute(attributeName = "email")
	@Expose
	private String email;

	/** The password. */
	@DynamoDBAttribute(attributeName = "password")
	private ByteBuffer password;

	/** The salt. */
	@DynamoDBAttribute(attributeName = "salt")
	private ByteBuffer salt;

	/** The display name. */
	@DynamoDBAttribute(attributeName = "displayedName")
	@Expose
	private String displayedName;

	/** The profile image url. */
	@DynamoDBAttribute(attributeName = "profileImageUrl")
	@Expose
	private String profileImageUrl;

	/** The pm code. */
	@DynamoDBAttribute(attributeName = "pmCode")
	@Expose
	private String pmCode;

	/** The type. */
	@DynamoDBAttribute(attributeName = "type")
	@Expose
	private String type;

	/** The activate key. */
	@DynamoDBAttribute(attributeName = "activateCode")
	private String activateCode;

	/** The status. */
	@DynamoDBAttribute(attributeName = "status")
	@Expose
	private String status;
	
	private UserIdentity identity;

	/** The created at. */
	@DynamoDBAttribute(attributeName = "createdAt")
	@Expose
	private Date createdAt;

	// //////////

	/**
	 * Instantiates a new user.
	 */
	public User() {

	}

	/**
	 * Gets the id.
	 *
	 * @return the id
	 */
	public String getId() {
		return id;
	}

	/**
	 * Sets the id.
	 *
	 * @param id the new id
	 */
	public void setId(String id) {
		this.id = id;
	}

	/**
	 * Gets the email.
	 *
	 * @return the email
	 */
	public String getEmail() {
		return email;
	}

	/**
	 * Sets the email.
	 *
	 * @param email the new email
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * Gets the password.
	 *
	 * @return the password
	 */
	public ByteBuffer getPassword() {
		return password;
	}

	/**
	 * Sets the password.
	 *
	 * @param password the new password
	 */
	public void setPassword(ByteBuffer password) {
		this.password = password;
	}

	/**
	 * Gets the salt.
	 *
	 * @return the salt
	 */
	public ByteBuffer getSalt() {
		return salt;
	}

	/**
	 * Sets the salt.
	 *
	 * @param salt the new salt
	 */
	public void setSalt(ByteBuffer salt) {
		this.salt = salt;
	}

	/**
	 * Gets the displayed name.
	 *
	 * @return the displayed name
	 */
	public String getDisplayedName() {
		return displayedName;
	}

	/**
	 * Sets the displayed name.
	 *
	 * @param displayedName the new displayed name
	 */
	public void setDisplayedName(String displayedName) {
		this.displayedName = displayedName;
	}

	/**
	 * Gets the activate code.
	 *
	 * @return the activate code
	 */
	public String getActivateCode() {
		return activateCode;
	}

	/**
	 * Sets the activate code.
	 *
	 * @param activateCode the new activate code
	 */
	public void setActivateCode(String activateCode) {
		this.activateCode = activateCode;
	}

	/**
	 * Gets the status.
	 *
	 * @return the status
	 */
	public String getStatus() {
		return status;
	}

	/**
	 * Sets the status.
	 *
	 * @param status the new status
	 */
	public void setStatus(String status) {
		this.status = status;
	}

	/**
	 * Gets the profile image url.
	 *
	 * @return the profile image url
	 */
	public String getProfileImageUrl() {
		return profileImageUrl;
	}

	/**
	 * Sets the profile image url.
	 *
	 * @param profileImageUrl the new profile image url
	 */
	public void setProfileImageUrl(String profileImageUrl) {
		this.profileImageUrl = profileImageUrl;
	}

	/**
	 * Gets the pm code.
	 *
	 * @return the pm code
	 */
	public String getPmCode() {
		return pmCode;
	}

	/**
	 * Sets the pm code.
	 *
	 * @param pmCode the new pm code
	 */
	public void setPmCode(String pmCode) {
		this.pmCode = pmCode;
	}

	/**
	 * Gets the type.
	 *
	 * @return the type
	 */
	public String getType() {
		return type;
	}

	/**
	 * Sets the type.
	 *
	 * @param type the new type
	 */
	public void setType(String type) {
		this.type = type;
	}

	/**
	 * Gets the created at.
	 *
	 * @return the created at
	 */
	public Date getCreatedAt() {
		return createdAt;
	}

	/**
	 * Sets the created at.
	 *
	 * @param createdAt the new created at
	 */
	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	/**
	 * Gets the password bytes.
	 *
	 * @return the password bytes
	 */
	@DynamoDBIgnore
	public byte[] getPasswordBytes() {
		return password.array();
	}

	/**
	 * Gets the salt bytes.
	 *
	 * @return the salt bytes
	 */
	@DynamoDBIgnore
	public byte[] getSaltBytes() {
		return salt.array();
	}
	
	@DynamoDBIgnore
    public UserIdentity getIdentity() {
        return identity;
    }

    public void setIdentity(UserIdentity identity) {
        this.identity = identity;
    }
    
    @DynamoDBAttribute(attributeName = "identityId")
    public String getCognitoIdentityId() {
        if (this.identity == null) {
            return null;
        }
        return this.identity.getIdentityId();
    }

    public void setCognitoIdentityId(String cognitoIdentityId) {
        if (this.identity == null) {
            this.identity = new UserIdentity();
        }
        this.identity.setIdentityId(cognitoIdentityId);
    }

	/**
	 * Instantiates a new user.
	 *
	 * @param item the item
	 */
	public User(Map<String, AttributeValue> item) {
		try {
			this.id = item.get("id").getS();
			this.email = item.get("email") != null ? item.get("email").getS() : null;
			this.password = item.get("password") != null ? item.get("password").getB() : null;
			this.salt = item.get("salt") != null ? item.get("salt").getB() : null;
			this.type = item.get("type") != null ? item.get("type").getS() : null;
			this.displayedName = item.get("displayedName") != null ? item.get("displayedName").getS() : null;
			this.activateCode = item.get("activateCode") != null ? item.get("activateCode").getS() : null;
			this.profileImageUrl = item.get("profileImageUrl") != null ? item.get("profileImageUrl").getS() : null;
			this.pmCode = item.get("pmCode") != null ? item.get("pmCode").getS() : null;
			this.status = item.get("status").getS();
			this.createdAt = item.get("createdAt") != null ? AppUtil.toDate(item.get("createdAt").getS()) : null;
			setCognitoIdentityId(item.get("identityId") != null ? item.get("identityId").getS() : null);
		} catch (Exception e) {
			//log.error(e.getMessage(), e.getCause());
			//FIXME Phu
		}
	}

	public User(String id, String email, ByteBuffer password, ByteBuffer salt, String displayedName, String profileImageUrl,
			String pmCode, String type, String activateCode, String status, Date createdAt) {
		super();
		this.id = id;
		this.email = email;
		this.password = password;
		this.salt = salt;
		this.displayedName = displayedName;
		this.profileImageUrl = profileImageUrl;
		this.pmCode = pmCode;
		this.type = type;
		this.activateCode = activateCode;
		this.status = status;
		this.createdAt = createdAt;
	}

	@Override
	public String toString() {
		return "User [id=" + id + ", email=" + email + ", password=" + password + ", salt=" + salt + ", displayedName="
				+ displayedName + ", profileImageUrl=" + profileImageUrl + ", pmCode=" + pmCode + ", type=" + type
				+ ", activateCode=" + activateCode + ", status=" + status + ", createdAt=" + createdAt + "]";
	}

	@Override
	public int compareTo(User other) {
		return this.displayedName.compareTo(other.displayedName);
	}
	
}

